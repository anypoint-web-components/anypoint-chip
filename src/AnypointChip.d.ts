/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/AnypointChip.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

export {AnypointChip};

declare namespace UiElements {

  /**
   * `anypoint-chip`
   *
   * A compact material design element that represent and input, attribute, or action.
   *
   * A chip contains a label and optionally an icon and remove icon.
   *
   * Remove icon is predefined. However icon can be any HTML element with
   * `slot="icon"` attribute. Per material design guidelines the icon is rounded.
   *
   * ## Example
   *
   * ```html
   * <anypoint-chip removable>
   *  <iron-icon icon="maps:directions-bike" slot="icon"></iron-icon>
   *  Biking
   * </anypoint-chip>
   * ```
   *
   * The "Bliking" is the label rendered next to the icon. The chip also renders
   * built-in remove icon. Clicking on the icon dispatches `chip-removed`
   * custom event only. It does not remove the chip from the document as the
   * application logic might use different ways of removing elements from dom
   * than web platform APIs.
   *
   * ## Styling
   *
   * `<anypoint-chip>` provides the following custom properties for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--anypoint-chip-background-color` | Chip background color | `rgba(35, 47, 52, 0.12)`
   * `--anypoint-chip-focused-background-color` | Background color when focused | `#D6D6D6`
   * `--anypoint-chip-active-background-color` | Background color when toggle is active | `#cdcdcd`
   * `--anypoint-chip-icon-color` | Color of the icon | `#666666`
   * `--anypoint-chip-label-color` | Color of the label | `#232F34`
   * `--anypoint-chip-label-focused-color` | Color of the when focused | ``
   * `--anypoint-chip-label-active-color` | Color of the when active | ``
   * `--anypoint-chip-icon-close-color` | Color of the close icon | `#dfdfdf`
   * `--anypoint-chip-icon-close-background-color` | Background color of the close icon | `#666666`
   *
   * `<anypoint-chip>` provides the following [parts](https://www.w3.org/TR/css-shadow-parts-1/):
   *
   * Part name | Description
   * ----------------|-------------
   * `anypoint-chip-container` | Styles applied to the chip container
   * `anypoint-chip-icon` | Styles applied to the icon container
   * `anypoint-chip-label` | Styles applied to the label container
   * `anypoint-chip-remove` | Styles applied to the delete icon
   */
  class AnypointChip extends LitElement {

    /**
     * If true, the user cannot interact with this element.
     */
    disabled: Boolean|null;
    readonly active: Boolean|null;
    _active: any;
    readonly focused: Boolean|null;
    _focused: any;
    readonly _iconSlot: HTMLElement|null;

    /**
     * If set the chip can be removed.
     * The element does not remove itself from the DOM. It rather dispatch
     * `chip-removed` custom event to inform parent element about the action.
     */
    removable: boolean|null|undefined;

    /**
     * A name of the icon to render when `removable` property is set.
     * By default it referes to Polymer's default icons library, to the
     * `clear` icon. You must include this library into your document.
     * You can also use whatever other icons library.
     */
    removeIcon: string|null|undefined;
    _hasIconNode: boolean|null|undefined;

    /**
     * If true, the button toggles the active state with each click or press
     * of the spacebar or enter.
     */
    toggles: boolean|null|undefined;

    /**
     * Enables Anypoint compatibility
     */
    compatibility: boolean|null|undefined;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(changedProperties: any): void;
    render(): any;
    _iconSlotTemplate(): any;
    _removeTemplate(): any;

    /**
     * Adds the `slotchange` event listener to the icon slot.
     */
    _addSlotEvent(): void;

    /**
     * Handler for remove icon click event.
     * Cancels the event and calls `remove()`
     */
    _removeHandler(e: ClickEvent|null): void;

    /**
     * Dispatches `chip-remove` custom event to inform application
     * that the user requested to remove the item.
     *
     * Note, this does not check if `removable` is set.
     */
    remove(): void;

    /**
     * According to material design spec, when there's no icon the
     * left hand side padding should be 12dp. Slotted styling API does now
     * allow to detect when there's no contect so it has to be done using
     * node observer.
     */
    _detectHasIcon(): void;

    /**
     * Computes class name for the container.
     *
     * @param hasIconNode True if the element has an icon in the light DOM.
     * @param removable True if the element can be removed.
     * @returns Class name.
     */
    _computeContainerClass(hasIconNode: Boolean|null, removable: Boolean|null): String|null;

    /**
     * Handler for key down when element is focused.
     * Removes the item when delete key is pressed.
     */
    _keyDownHandler(e: KeyboardEvent|null): void;

    /**
     * Sets state of the `focused` property depending on the event handled by this
     * listener.
     *
     * @param e Either focus or blur events
     */
    _focusBlurHandler(e: Event|null): void;

    /**
     * Calles when the value of `disabled` property change. Sets `aria-disabled`
     * and `tabIndex` attributes.
     *
     * @param disabled Current value of `disabled` property.
     */
    _disabledChanged(disabled: Boolean|null): void;

    /**
     * Handles click event (as well as Space and Enter key down) as sets the
     * `active` property.
     */
    _clickHandler(): void;

    /**
     * Sets `_active` property depending on the input and current state of `_active`.
     *
     * @param active The value to set.
     */
    _userActivate(active: Boolean|null): void;

    /**
     * Calls `clic()` function on this element so event listeners can handle
     * the action.
     */
    _asyncClick(): void;
  }
}
